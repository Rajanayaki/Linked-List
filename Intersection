class node:
  def  __init__(self,data):
    self.data=data
    self.next=None

class linkedlist:
  def __init__(self):
    self.head=None
    
  def push(self,data):
    newnode=node(data)
    if self.head is None:
      self.head=newnode
    else:
      temp=self.head
      while(temp.next!=None):
        temp=temp.next
      temp.next=newnode
    
  def intersectnode(self,head1,head2):
    head1.next.next.next=head2.next
      
  def intersect(self,head1,head2):
    curr1=head1
    curr2=head2
    len1=len2=0
    while(curr1!=None):
      len1+=1
      curr1=curr1.next
    while(curr2!=None):
      len2+=1
      curr2=curr2.next
    curr1,curr2=head1,head2
    if len1>len2:
      for i in range(len1-len2):
        curr1=curr1.next
    elif len1<len2:
      for i in range(len2-len1):
        curr2=curr2.next
    while(curr1!=curr2):
      curr1=curr1.next
      curr2=curr2.next
    print(curr2.data)
  def printlist(self):
    temp=self.head
    while(temp.next!=None):
      print(temp.data,end=" ")
      temp=temp.next
    print(temp.data)
    
ll1=linkedlist()
size1=int(input())
elements=list(map(int,input().split()))
for i in range(size1):
  ll1.push(elements[i])
ll2=linkedlist()
size2=int(input())
elements2=list(map(int,input().split()))
for i in range(size2):
  ll2.push(elements2[i])
ll1.printlist()
ll2.printlist()
ll3=linkedlist()
ll3.intersectnode(ll1.head,ll2.head)
ll3.intersect(ll1.head,ll2.head)
